# .github/workflows/tag-author.yml
name: Tag Original Bounty Author

on:
  pull_request:
    types: [opened]

permissions:
  pull-requests: write # To comment on the PR
  issues: read       # To read the original issue details

jobs:
  tag_author:
    runs-on: ubuntu-latest
    # Avoid loops if actions commit, and don't run on forks initially
    if: github.event.pull_request.user.login != 'github-actions[bot]' && github.event.pull_request.head.repo.full_name == github.repository
    steps:
      # Checkout with PAT to allow pushing changes back to the PR branch
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch history to compare changes against base branch
          fetch-depth: 0
          # Use PAT for push permissions
          token: ${{ secrets.PAT_TOKEN }}
          # Ensure we check out the PR branch head
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Get changed submission files
        id: changed_files
        # Uses an action to reliably get files changed in the PR compared to the base branch
        uses: tj-actions/changed-files@v44
        with:
          files: submissions/*.json

      - name: Tag author if submission added/modified
        # Only run if a JSON file in submissions/ was added or modified in this PR
        if: steps.changed_files.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const prNumber = context.issue.number;
            const prOwner = context.repo.owner;
            const prRepo = context.repo.repo;
            const prOpener = context.payload.pull_request.user.login;
            const prBranch = context.payload.pull_request.head.ref;

            // Get the first changed JSON file in submissions/
            // Assumes only one submission JSON per PR for simplicity
            const changedFiles = `${{ steps.changed_files.outputs.all_changed_files }}`.split(' ');
            // Filter for files that were added or modified
            const submissionFile = changedFiles.find(file => file.startsWith('submissions/') && file.endsWith('.json'));

            if (!submissionFile) {
              console.log('No submission JSON file found among added/modified files.');
              return;
            }

            console.log(`Processing submission file: ${submissionFile}`);
            let submissionData;
            try {
              // Read the file content *from the PR branch*
              // Note: This assumes the checkout step correctly checked out the PR branch
              const fileContent = fs.readFileSync(submissionFile, 'utf8');
              submissionData = JSON.parse(fileContent);
            } catch (error) {
              console.error(`Error reading or parsing ${submissionFile}:`, error);
              await github.rest.issues.createComment({
                owner: prOwner,
                repo: prRepo,
                issue_number: prNumber,
                body: `⚠️ Could not read or parse the submission JSON file \`${submissionFile}\`. Please ensure it's valid JSON.`
              });
              return;
            }

            const originalIssueLink = submissionData.original_issue_link;
            const bountyId = submissionData.bounty_id || 'Unknown Bounty ID'; // Fallback

            if (!originalIssueLink) {
              console.log('No original_issue_link found in submission JSON.');
              await github.rest.issues.createComment({
                owner: prOwner,
                repo: prRepo,
                issue_number: prNumber,
                body: `Could not find the \`original_issue_link\` in \`${submissionFile}\`. Cannot tag the original author.`
              });
              return;
            }

            // Robust parsing of GitHub issue URL (handles different formats)
            const urlMatch = originalIssueLink.match(/github\.com\/([\w.-]+)\/([\w.-]+)\/(?:issues|pull)\/(\d+)/);
            if (!urlMatch) {
              console.error(`Could not parse original issue URL: ${originalIssueLink}`);
              await github.rest.issues.createComment({
                owner: prOwner,
                repo: prRepo,
                issue_number: prNumber,
                body: `Could not parse the \`original_issue_link\`: ${originalIssueLink}. Cannot tag the original author.`
              });
              return;
            }

            const issueOwner = urlMatch[1];
            const issueRepo = urlMatch[2];
            const issueNumber = parseInt(urlMatch[3], 10);

            console.log(`Fetching original issue: ${issueOwner}/${issueRepo}#${issueNumber}`);
            try {
              // Use issues.get for issues, pulls.get for PRs if needed, but issues.get often works for both
              const { data: issue } = await github.rest.issues.get({
                owner: issueOwner,
                repo: issueRepo,
                issue_number: issueNumber,
              });

              const originalAuthor = issue.user.login;
              console.log(`Original author found: ${originalAuthor}`);

              // --- Add reviewer to JSON ---
              try {
                console.log(`Attempting to add reviewer '${originalAuthor}' to ${submissionFile}`);
                // Re-read the file in case it was modified by previous steps (unlikely here, but good practice)
                const currentContent = fs.readFileSync(submissionFile, 'utf8');
                const currentData = JSON.parse(currentContent);

                // Add or update the reviewer field
                currentData.reviewer = originalAuthor;

                // Write the updated JSON back with standard indentation
                fs.writeFileSync(submissionFile, JSON.stringify(currentData, null, 2) + '\n', 'utf8');
                console.log(`Successfully updated ${submissionFile} with reviewer.`);

                // --- Commit and push the change ---
                const { execSync } = require('child_process');
                console.log('Configuring git user...');
                execSync(`git config --global user.name "github-actions[bot]"`);
                execSync(`git config --global user.email "github-actions[bot]@users.noreply.github.com"`);

                console.log(`Adding ${submissionFile} to git...`);
                execSync(`git add ${submissionFile}`);

                // Check if there are changes staged
                const statusOutput = execSync('git status --porcelain').toString();
                if (statusOutput.includes(submissionFile)) {
                  console.log('Committing changes...');
                  const commitMessage = `ci: Add reviewer (${originalAuthor}) to ${submissionFile}`;
                  execSync(`git commit -m "${commitMessage}"`);

                  console.log(`Pushing changes to branch ${prBranch}...`);
                  // Use the PAT implicitly via checkout token for push
                  execSync(`git push origin HEAD:${prBranch}`);
                  console.log('Push successful.');
                } else {
                   console.log('No changes detected in submission file after update attempt. Skipping commit/push.');
                }

              } catch (commitError) {
                 console.error('Error updating submission JSON or committing/pushing:', commitError);
                 // Optionally, comment on the PR about the failure
                 await github.rest.issues.createComment({
                   owner: prOwner,
                   repo: prRepo,
                   issue_number: prNumber,
                   body: `⚠️ Failed to automatically add reviewer '${originalAuthor}' to \`${submissionFile}\`. Please add it manually. Error: ${commitError.message}`
                 });
                 // Continue to commenting step despite commit failure
              }
              // --- End add reviewer ---


              // Avoid tagging the PR opener if they are the original author
              if (originalAuthor.toLowerCase() === prOpener.toLowerCase()) {
                console.log(`PR opener (${prOpener}) is the original author (${originalAuthor}). Skipping tag comment.`);
                // Still return here after attempting to add reviewer
                return;
              }

              const commentBody = `FYI @${originalAuthor}, bounty \`${bountyId}\` (${originalIssueLink}) is being reserved by @${prOpener}. Reviewer field automatically added to submission file.`;

              await github.rest.issues.createComment({
                owner: prOwner,
                repo: prRepo,
                issue_number: prNumber,
                body: commentBody,
              });
              console.log(`Comment posted on PR #${prNumber}.`);

            } catch (error) {
              console.error(`Error fetching original issue or commenting:`, error);
              await github.rest.issues.createComment({
                owner: prOwner,
                repo: prRepo,
                issue_number: prNumber,
                body: `⚠️ Could not fetch details for the original issue (${originalIssueLink}) or post comment. Error: ${error.message}`
              });
            }
